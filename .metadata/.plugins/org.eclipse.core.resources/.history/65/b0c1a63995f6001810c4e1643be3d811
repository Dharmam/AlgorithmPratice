package december;

import java.util.Arrays;

/**
 * 414. Third Maximum Number
 * 
 * @author dbuch Given a non-empty array of integers, return the third maximum
 *         number in this array. If it does not exist, return the maximum
 *         number. The time complexity must be in O(n).
 * 
 *         Example 1: Input: [3, 2, 1]
 * 
 *         Output: 1
 * 
 *         Explanation: The third maximum is 1. Example 2: Input: [1, 2]
 * 
 *         Output: 2
 * 
 *         Explanation: The third maximum does not exist, so the maximum (2) is
 *         returned instead. Example 3: Input: [2, 2, 3, 1]
 * 
 *         Output: 1
 * 
 *         Explanation: Note that the third maximum here means the third maximum
 *         distinct number. Both numbers with value 2 are both considered as
 *         second maximum.
 */
public class ThirdMaximumNumber {

	public static void main(String[] args) {
		System.out.println(thirdMax(new int[] { 2, 2, 3, 1 }));
		System.out.println(thirdMax(new int[] { 3, 2, 1 }));
		System.out.println(thirdMax(new int[] { 2, 1 }));

	}

	static int thirdMax(int[] nums) {
		Arrays.sort(nums);
		System.out.println(nums);
		int last = 0 ;
		int i = nums.length-1, count=0 ;
		while(i>=0 && count<3){
			if(last!=nums[i])count++;
			last=nums[i];
			i--;
		}
		return last ;
	}
}
