package december;

import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

/**
 * 414. Third Maximum Number
 * 
 * @author dbuch Given a non-empty array of integers, return the third maximum
 *         number in this array. If it does not exist, return the maximum
 *         number. The time complexity must be in O(n).
 * 
 *         Example 1: Input: [3, 2, 1]
 * 
 *         Output: 1
 * 
 *         Explanation: The third maximum is 1. Example 2: Input: [1, 2]
 * 
 *         Output: 2
 * 
 *         Explanation: The third maximum does not exist, so the maximum (2) is
 *         returned instead. Example 3: Input: [2, 2, 3, 1]
 * 
 *         Output: 1
 * 
 *         Explanation: Note that the third maximum here means the third maximum
 *         distinct number. Both numbers with value 2 are both considered as
 *         second maximum.
 */
public class ThirdMaximumNumber {

	public static void main(String[] args) {
		System.out.println(thirdMax(new int[] { 1, 2 }));
	}

	static int thirdMax(int[] nums) {
		PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				if (o1 < o2)
					return 1;
				else if (o2 < o1)
					return 2;
				return 0;
			}
		});
		for (int i : nums) {
			pq.offer(i);
		}
		int i = 0;
		int last = 0 ;
		while (pq.peek() != null && i < 2) {
			last = pq.poll();
			i++;
		}
		return pq.peek()==null ? last : pq.poll();
	}
}
